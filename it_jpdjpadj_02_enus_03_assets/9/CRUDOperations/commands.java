


////// Almost no changes required from the previous demos
////// Will point out when a source file has changed

////// Change the EmployeeDemo method in SpringdatajpaApplication
// Fetch all users reffer SpringdatajpaApplication-1.java

  @Bean
  public CommandLineRunner EmployeeDemo(EmployeeRepository employeeRepository) {
    return (args) -> {

      System.out.println("\n**************************");
      System.out.println("\nRetrieving all employee data...\n");
      for (Employee em : employeeRepository.findAll()) {
        System.out.println(em.toString());
      }
    };
  }


// Run and show the hibernate sql query and output

// fetch Employee by id reffer SpringDataJpaApplication-2.java
////// The .get call is needed since there may not be a matching Employee
////// findById returns an Optional<Employee> and not just an Employee object

      System.out.println("\n**************************");
      System.out.println("\nRetrieving data for one employee...\n");
      Employee em = employeeRepository.findById(1L).get();
      System.out.println(em.toString());
      System.out.println("\n**************************");

// Run and show the curresponding hibernate sql query and output

// fetch Employee by email address - reffer EmployeeRepository-3.java

// defined an additional method 
    Employee findByEmail(String email);

// reffer SpringDataJpaApplication-3.java
      System.out.println("\n**************************");
      System.out.println("\nRetrieving an employee based on email address...\n");
      Employee employeeByEmail = employeeRepository.findByEmailaddress("Marcia_Lin89@hotmail.com");
      System.out.println(employeeByEmail.toString());
      System.out.println("\n**************************");

// Run and view the curresponding hibernate sql query and output

////// The method generated by Spring Data JPA depends on the name of the field
////// In this example, the method findByEmail is created in this manner
//////     - findBy (to denote the location of data by a field)
//////     - Email (this needs to match a column name in the database)

////// To demonstrate, let's head to EmployeeRepository.java and use
////// add this method instead of findByEmail (refer EmployeeRepository-4.java)
  Employee findByEmailaddress(String email);

////// In SpringDataJpaApplication, change the function call (refer SpringdatajpaApplication-4.java)
    Employee employeeByEmail = employeeRepository.findByEmailaddress("Marcia_Lin89@hotmail.com");

////// Run the program - there is an exception
////// Specifically
.PropertyReferenceException: No property emailaddress found for type Employee!

////// Clearly, the method added to the EmployeeRepository must be derived from
////// the name of the column based on which a search is performed


////// Multiple matches

////// Modify the EmployeeRepository (refer v5) to include findByEmail and also
////// a findByName method

public interface EmployeeRepository extends CrudRepository<Employee, Long> {

    Employee findByEmail(String email);
    Employee findByName(String name);
}

////// Modify the EmployeeDemo method in SpringdatajpaApplication (refer v5)
////// This now creates a second employee called Marcia Lin
////// findByName should return 2 values, but it's only set to return 1

  @Bean
  public CommandLineRunner EmployeeDemo(EmployeeRepository employeeRepository) {
    return (args) -> {

      employeeRepository.save(new Employee("Marcia Lin", "marcia.lin@loonycorn.com"));

      System.out.println("\n**************************");
      System.out.println("\nRetrieving employees based on name...\n");
      Employee employeeByName = employeeRepository.findByName("Marcia Lin");
      System.out.println(employeeByName.toString());
      System.out.println("\n**************************");
    };
  }

//// Run the program - there is an exception
////// The match found is not unique. A change is required in the findByName method

//// Confirm there are two employees with the name Marcia Lin from the DB client (MySQLWorkbench)

SELECT * FROM Employee;


////// In EmployeeRepository (refer v6), add this import
import java.util.List;

//// Change the signature of findByName to return a list of Employees
  List<Employee> findByName(String name);


////// In SpringdatajpaApplication (refer v6), add an import
import java.util.List;

//// Then modify the EmployeeDemo method
////// Remove the insert (save) of a new employee, and expect a list of Employees
////// when calling findByName

  @Bean
  public CommandLineRunner EmployeeDemo(EmployeeRepository employeeRepository) {
    return (args) -> {

      System.out.println("\n**************************");
      System.out.println("\nRetrieving employees based on name...\n");
      List<Employee> employeesByName = employeeRepository.findByName("Marcia Lin");
      System.out.println(employeesByName.toString());
      System.out.println("\n**************************");
    };
  }

////// Run the program - there is no exception and 2 Marcia Lins are returned


////// Change the name being searched for to one which does not produce a match
////// Use this in the call to findByName in SpringdatajpaApplication (refer v7)

    List<Employee> employeesByName = employeeRepository.findByName("Loony Corn");

//// Run the program - an empty array is returned

////// Add a call to findById in SpringdatajpaApplication (refer v8)

      System.out.println("\n**************************");
      System.out.println("\nRetrieving employee based on Id...\n");
      Employee employeeById = employeeRepository.findById(25L);
      System.out.println(employeeById.toString());
      System.out.println("\n**************************");

////// There is a compile error - hover over it
////// findById returns an Optional<Employee>, not an Employee

////// Go to EmployeeRepository (refer v9) and this import
import java.util.Optional;

////// Modify the interface
public interface EmployeeRepository extends CrudRepository<Employee, Long> {

    Optional<Employee> findByEmail(String email);
    Optional<List<Employee>> findByName(String name);

}

//////  Add this import in SpringdatajpaApplication (refer v9)
import java.util.Optional;

////// Change the EmployeeDemo method
  @Bean
  public CommandLineRunner EmployeeDemo(EmployeeRepository employeeRepository) {
    return (args) -> {

      System.out.println("\n**************************");
      System.out.println("\nRetrieving employees based on name...\n");
      Optional<List<Employee>> employeesByName = employeeRepository.findByName("Loony Corn");
      System.out.println(employeesByName.toString());
      System.out.println("\n**************************");

      System.out.println("\n**************************");
      System.out.println("\nRetrieving employee based on Id...\n");
      Optional<Employee> employeeById = employeeRepository.findById(25L);
      System.out.println(employeeById.toString());
      System.out.println("\n**************************");

    };
  }

////// Run the program - when retrieving by Id, we can see the value is Optional.Empty



////// Updating data


// update email id - refer SpringDataJpaApplication-10.java
  @Bean
  public CommandLineRunner EmployeeDemo(EmployeeRepository employeeRepository) {
    return (args) -> {

      Optional<Employee> emp = employeeRepository.findByEmail("marcia.lin@loonycorn.com");

      if(emp.isPresent()) {

        Employee retrievedEmp = emp.get();
        retrievedEmp.setEmail("marcia-lin@loonycorn.com");

        employeeRepository.save(retrievedEmp);

        System.out.println("\n**************************");
        System.out.println("\nEmployee updated:");
        System.out.println(retrievedEmp.toString());
        System.out.println("\n**************************");
      }


    };
  }

// Run and view output - the mail id has been updated
// Check via mySQL workbench as well
SELECT * FROM Employee;


////// Deleting data

////// First, we delete 2 Employees using an Employee object and by Id
////// Refer v11 of SpringdatajpaApplication

  @Bean
  public CommandLineRunner EmployeeDemo(EmployeeRepository employeeRepository) {
    return (args) -> {

      Employee emp = employeeRepository.findByEmail("marcia-lin@loonycorn.com").get();
      employeeRepository.delete(emp);

      employeeRepository.deleteById(1L);

    };
  }

////// Run the program - there is no output

////// Check from the DB client that the 2 rows has been removed
SELECT * FROM Employee;


////// Remove all employees


// delete all Employee - refer SpringDataJpaApplication-9.java
  @Bean
  public CommandLineRunner EmployeeDemo(EmployeeRepository employeeRepository) {
    return (args) -> {

      employeeRepository.deleteAll();
    };
  }

// Run and show the curresponding hibernate sql query and output

////// Check from the DB client that all rows have been removed
SELECT * FROM Employee;
